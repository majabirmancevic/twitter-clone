version: "3.8"

services:
  auth_service:
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: always
    container_name: "auth_service"
    hostname: "auth_service"
    ports:
      - 8001:8001
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8001
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      #- MONGO_DB_URI=mongodb://root:pass@mongo:27017
      - MONGO_DB_URI=mongodb://mongo:27017
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_PORT=587
    depends_on:
      - mongo

  api_gateway:
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - 8000:8000

  mongo:
    image: mongo:4.4.6
    restart: always
    ports:
      - "27017:27017"
    environment:
      #MONGO_INITDB_ROOT_USERNAME: root
      #MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: twitter
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

volumes:
  mongo_store:
